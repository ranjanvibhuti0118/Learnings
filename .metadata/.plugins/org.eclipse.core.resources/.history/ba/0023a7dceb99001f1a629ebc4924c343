package com.app.order.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.app.order.dao.AddressDAO;
import com.app.order.dao.CustomerDAO;
import com.app.order.entity.Address;
import com.app.order.entity.Customer;
import com.app.order.exception.CustomerDetailsNotFound;
import com.app.order.exception.OrderProcessingException;

import jakarta.transaction.Transactional;

@Service
public class CustomerServiceImpl implements CustomerService{

	@Autowired
	private CustomerDAO custDao;

	@Autowired
	private AddressDAO addrDao;

	@Override
	@Transactional
	public Customer createCustomer(Customer cust,Address address) {

		Long custId=checkForExistingCustomer(cust);
		Address address= cust.getAddresses();

		Long addrId=checkAddress(address);
		address.setAddressId(addrId);
		System.out.println("addrId: "+addrId);
		if(addrId!=null) {
			cust.setAddressId(String.valueOf(addrId));
			cust.setAddresses(address);
			
			if(custId==null) {
				
				System.out.println("new Cust: "+cust);

				Customer savedCustomer= custDao.save(cust);
				return savedCustomer;
			}else {
				
				cust.setCustomerId(custId);
				cust.getAddresses().setAddressId(addrId);
				return cust;
			}
		}
		return cust;		
	}


	private Long checkAddress(Address address) {

		String sAddrLine1= address.getAddressLine1();
		String sAddrLine2= address.getAddressLine2();
		String sAddrLine3= address.getAddressLine3();
		String sZipcode= address.getZipcode();

		Address existingAddress=addrDao.findByAddressLine1AndAddressLine2AndAddressLine3AndZipcode(sAddrLine1,sAddrLine2,sAddrLine3,sZipcode);
		Long addId=null;
		if(existingAddress!=null) {
			addId=existingAddress.getAddressId();
		}else {
			Address savedAddress=addrDao.save(address);
			addId=savedAddress.getAddressId();

		}
		
		
		return addId;
	}


	private Long checkForExistingCustomer(Customer cust) {

		Long lCustId=null;

		if(cust!=null) {

			String sFirstName= cust.getFirstName();
			String sLastName= cust.getLastName();
			String sMobileNum= cust.getMobileNo();

			if(sFirstName==null || sLastName ==null || sMobileNum==null) {

				throw new OrderProcessingException("Error while processing customer info");
			}

			Customer existingCust = custDao.findCustomerByFirstNameAndLastNameAndMobileNo(sFirstName, sLastName, sMobileNum);
				

			if(existingCust!=null) {
				lCustId= existingCust.getCustomerId();
			}

			return lCustId;

		}else {
			throw new CustomerDetailsNotFound("Customer info is mandatory");
		}

	}

}
